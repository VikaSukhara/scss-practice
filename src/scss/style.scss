// @use "reset";
@use "sass:math";
@use "sass:list";
@use "sass:map";

.page-title {
  text-align: center;
  margin-bottom: 20px;
}

.wrapper {
  background-color: aquamarine;
  width: 700px;
  height: 400px;
  margin: 150px auto;

  display: flex;
  flex-direction: column;
  justify-content: center;
}

.badge {
  color: white;
  padding: 20px 50px;
}

.btn-wrapper {
  display: flex;
  margin: 0 auto;
  gap: 10px;
}

.badge-completed {
  background-color: purple;
}
.badge-ended {
  background-color: red;
}
.badge-active {
  background-color: green;
}

//@each

$status: (
  "completed": purple,
  "ended": red,
  "active": green,
);

@each $name, $color in $status {
  .badge-#{$name} {
    background-color: $color;
  }
}

//@each

@each $name, $color in (completed: purple, ended: red, active: green) {
  .badge-#{$name} {
    background-color: $color;
  }
}

// —ñ—Ç–µ—Ä–∞—Ü—ñ—è 1

// $name: completed;
// $color: purple;

// .bagde-completed {
//   background-color: purple;
// }

// Task 1

// –ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é @each –∑–≥–µ–Ω–µ—Ä—É–π –∫–ª–∞—Å–∏ .badge-{–Ω–∞–∑–≤–∞}
// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π @if, —â–æ–±:
// –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å ‚Äî archived, –¥–æ–¥–∞—Ç–∏ —Ç–∞–∫–æ–∂ opacity: 0.5
// –Ü–Ω–∞–∫—à–µ ‚Äî –∑–≤–∏—á–∞–π–Ω–∏–π background-color

$status-colors: (
  "completed": purple,
  "active": green,
  "ended": red,
  "archived": gray,
);

@each $key, $value in $status-colors {
  .badge-#{$key} {
    background-color: $value;

    @if ($key == "archived") {
      opacity: 0.5;
    }
  }
}

// Task 2

$status-colors: (
  active: (
    color: green,
    is-active: true,
  ),
  completed: (
    color: purple,
    is-active: false,
  ),
  archived: (
    color: gray,
    is-active: false,
  ),
  warning: (
    color: orange,
    is-active: true,
  ),
);

// –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞–ø–∏—Å–∞—Ç–∏ –º—ñ–∫—Å–∏–Ω generate-badges, —è–∫–∏–π:
// –°—Ç–≤–æ—Ä—é—î –∫–ª–∞—Å–∏ .badge-<–∫–ª—é—á> –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É.
// –í—Å—Ç–∞–Ω–æ–≤–ª—é—î background-color –∑ –º–∞–ø–∏.
// –Ø–∫—â–æ is-active == false, –¥–æ–¥–∞—î opacity: 0.5.

@mixin generate-badges($status-colors) {
  @each $key, $map in $status-colors {
    // –ø—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –∑–æ–≤–Ω—ñ—à–Ω—ñ–π –º–∞–ø—ñ.
    // @debug $map // (color: green, is-active: true)

    $color: map-get($map, color); //–≤–∏—Ç—è–≥—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–ª—é—á–∞ color.
    $is-active: map-get($map, is-active);

    .badge-#{$key} {
      background-color: $color;

      @if $is-active == false {
        opacity: 0.5;
      }
    }
  }
}

@include generate-badges($status-colors);

// Task 3

// –ó–∞–¥–∞—á–∞: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–Ω–æ–ø–æ–∫ –∑ —Ä—ñ–∑–Ω–∏–º –∫–æ–ª—å–æ—Ä–æ–º —ñ —Ä–æ–∑–º—ñ—Ä–æ–º
// –£ —Ç–µ–±–µ —î –º–∞–ø–∞ –∑ –∫–Ω–æ–ø–∫–∞–º–∏, –¥–µ –∫–æ–∂–Ω–∞ –∫–Ω–æ–ø–∫–∞ –º–∞—î:

// color

// size (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: sm, md, lg)

// disabled (true –∞–±–æ false)

// üî∏ –°—Ç–≤–æ—Ä–∏ –º—ñ–∫—Å–∏–Ω generate-buttons, —è–∫–∏–π:
// –ü—Ä–æ—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ —Ü—é –º–∞–ø—É.

// –°—Ç–≤–æ—Ä—é—î –∫–ª–∞—Å .btn-[name]

// –í—Å—Ç–∞–Ω–æ–≤–ª—é—î background-color —ñ padding –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ size:

// sm: 4px 8px

// md: 6px 12px

// lg: 8px 16px

// –Ø–∫—â–æ disabled: true, –¥–æ–¥–∞—î opacity: 0.5 —ñ cursor: not-allowed

$buttons: (
  primary: (
    color: blue,
    size: md,
    disabled: false,
  ),
  secondary: (
    color: gray,
    size: sm,
    disabled: true,
  ),
  danger: (
    color: red,
    size: lg,
    disabled: false,
  ),
);

@mixin generate-buttons($buttons) {
  @each $key, $map in $buttons {
    //   @debug $key // archived
    // // @debug $map // primary (color: blue, size: md, disabled: false)

    $color: map-get($map, color);
    $size: map-get($map, size);
    $disabled: map-get($map, disabled);
    $padding: 0;

    @if $size == sm {
      $padding: 4px 8px;
    } @else if $size == md {
      $padding: 6px 12px;
    } @else if $size == lg {
      $padding: 8px 16px;
    }

    .badge-#{$key} {
      background-color: $color;
      padding: $padding;

      @if $disabled {
        opacity: 0.5;
        cursor: not-allowed;
      }
    }
  }
}

@include generate-buttons($buttons);

$cards: (
  basic: (
    background-color: lightgray,
    border: 1px solid gray,
    padding: 15px,
    is-active: true,
  ),
  featured: (
    background-color: yellow,
    border: 1px solid orange,
    padding: 20px,
    is-active: false,
  ),
  premium: (
    background-color: gold,
    border: 2px solid darkgoldenrod,
    padding: 25px,
    is-active: true,
  ),
);

// –°—Ç–≤–æ—Ä–∏ –º—ñ–∫—Å–∏–Ω generate-cards, —è–∫–∏–π –±—É–¥–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–∏ —á–µ—Ä–µ–∑ –º–∞–ø—É –∫–∞—Ä—Ç–æ–∫.
// –°—Ç–≤–æ—Ä—é—î –∫–ª–∞—Å–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–∞—Ä—Ç–∫–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ .card-[name].
// –í—Å—Ç–∞–Ω–æ–≤–ª—é—î background-color, border, —ñ padding –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–Ω–∞—á–µ–Ω—å —É –º–∞–ø—ñ.
// –Ø–∫—â–æ –∫–∞—Ä—Ç–∫–∞ –º–∞—î is-active: false, –¥–æ–¥–∞—î –¥–æ –Ω–µ—ó –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å opacity: 0.5.

// @mixin generate-cards($cards) {
//   @each $key, $map in $cards {
//     $background-color: map-get($map, background-color);
//     $border: map-get($map, border);
//     $padding: map-get($map, padding);
//     $is-active: map-get($map, is-active);
//     .card-#{$key} {
//       background-color: $background-color;
//       border: $border;
//       padding: $padding;

//       @debug $is-active;

//       @if $is-active == false {
//         opacity: 0.5;
//       }
//     }
//   }
// }

// @include generate-cards($cards);

// Task 4

// 2. –ú—ñ–∫—Å–∏–Ω
// –°—Ç–≤–æ—Ä–∏ –º—ñ–∫—Å–∏–Ω generate-cards, —è–∫–∏–π:
// –ü—Ä–æ—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∫–æ–∂–Ω—É –∫–∞—Ä—Ç–∫—É –≤ –º–∞–ø—ñ.
// –°—Ç–≤–æ—Ä—é—î –∫–ª–∞—Å .card-[name], –¥–µ [name] ‚Äî —Ü–µ –∫–ª—é—á –º–∞–ø–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, small-card, medium-card).
// –í—Å—Ç–∞–Ω–æ–≤–ª—é—î —Å—Ç–∏–ª—å –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–∞—Ä—Ç–∫–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —ó—ó –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤:

$cards: (
  small-card: (
    background-color: lightblue,
    border: 1px solid darkblue,
    padding: 10px,
    is-active: true,
    size: small,
  ),
  medium-card: (
    background-color: lightgreen,
    border: 1px solid darkgreen,
    padding: 20px,
    is-active: false,
    size: medium,
  ),
  large-card: (
    background-color: lightyellow,
    border: 1px solid darkyellow,
    padding: 30px,
    is-active: true,
    size: large,
  ),
);

@mixin generate-cards($cards) {
  @each $key, $map in $cards {
    $background-color: map-get($map, background-color);
    $border: map-get($map, border);
    $padding: map-get($map, padding);
    $is-active: map-get($map, is-active);
    $size: map-get($map, size);
    .card-#{$key} {
      background-color: $background-color;
      border: $border;
      padding: $padding;

      @if $is-active==false {
        opacity: 0.5;
      }

      // –ó–∞–¥–∞—î–º–æ margin –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–æ–∑–º—ñ—Ä—É –∫–∞—Ä—Ç–∫–∏
      @if $size == small {
        margin: 10px;
      } @else if $size == medium {
        margin: 20px;
      } @else if $size == large {
        margin: 30px;
      }
    }
  }
}

@include generate-cards($cards);

// Task 6

// h1: 32px

// h2: 28px

// h3: 24px

// h4: 20px

// h5: 16px

@mixin generate-heading-font-sizes() {
  @for $i from 1 through 5 {
    .heading-h#{$i} {
      font-size: #{32px - ($i - 1) * 4};
      // @debug #{32px - ($i - 1) * 4}

      // // 32 - 1 * 4 = 32 - 4 = 28
      // // 32 - 2 * 4 = 32 - 8 = 24
    }
  }
}

@include generate-heading-font-sizes();

// Task 7 @for

// –ó–∞–≤–¥–∞–Ω–Ω—è:
// –°—Ç–≤–æ—Ä–∏ –º—ñ–∫—Å–∏–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–ª–∞—Å—ñ–≤ –¥–ª—è —Å—ñ—Ç–∫–∏ (grid) –∑ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–º–∏ —Ä–æ–∑–º—ñ—Ä–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫, —è–∫–∞ –±—É–¥–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏—Å—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —É —Å—ñ—Ç—Ü—ñ. –¢–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞—Å–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –≤—ñ–¥—Å—Ç–∞–Ω–µ–π –º—ñ–∂ –∫–æ–ª–æ–Ω–∫–∞–º–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –¥–∏—Ä–µ–∫—Ç–∏–≤—É @for.

@mixin generate-grid($columns) {
  @for $i from 1 through $columns {
    .grid-#{$i} {
      grid-template-columns: repeat($i, 1fr);
    }
  }
}

@include generate-grid(6);

@mixin generate-margins($count) {
  @for $i from 1 through $count {
    .margin-#{$i} {
      margin: $i * 5px;
    }
  }
}

@include generate-margins(5);

// Task 8

@mixin generate-widths($steps) {
  @for $i from 1 through $steps {
    .w-#{$i} {
      width: $i * 10%;
    }
  }
}

@include generate-widths(3);

@mixin generate-badges($count) {
  @for $i from 1 through $count {
    .badges-#{$i} {
      padding: $i * 2px;

      @if ($i % 2 == 0) {
        background-color: lightgray;
      } @else {
        background-color: lightblue;
      }

      font-size: 12px + ($i * 1px);
    }
  }
}

@include generate-badges(5);

$alert-colors: (light, info, warning, danger, success);

@mixin generate-alerts($count) {
  @for $i from 1 through $count {
    .alert-#{$i} {
      padding: $i * 5px;
      font-size: 12px + $i * 2px;
      color: nth($alert-colors, $i);

      @if ($i % 2 == 0) {
        border: 1px solid black;
      }
    }
  }
}

@include generate-alerts(5);

// 0px + 1 ‚Üí 1 (–±–æ –≤ Sass: —á–∏—Å–ª–æ –±–µ–∑ –æ–¥–∏–Ω–∏—Ü—å + —á–∏—Å–ª–æ –∑ –æ–¥–∏–Ω–∏—Ü—è–º–∏ ‚Üí –æ–¥–∏–Ω–∏—Ü—ñ –∑–Ω–∏–∫–∞—é—Ç—å)
// 24px / 1
// ‚Üí —Ü–µ "px –ø–æ–¥—ñ–ª–∏—Ç–∏ –Ω–∞ –æ–¥–∏–Ω–∏—á–Ω–µ –±–µ–∑ –æ–¥–∏–Ω–∏—Ü—å"
// ‚Üí –≤–∏—Ö–æ–¥–∏—Ç—å –ø—Ä–æ—Å—Ç–æ 24 (–±–µ–∑ px)

// @function add-unit($value){
//     @return #{$value}px
// }

// @debug add-unit(20);

@function has-unit($value) {
  //   @if (unitless($value)) {
  //     @return false;
  //   } @else {
  //     @return true;
  //   }

  @return not unitless($value);
}

// @debug has-unit(20);
// @debug has-unit(9px);

// @function px-to-rem($value) {
//   $font-size: 16px;
//   @return #{$value / $font-size}rem;
// }

// @debug px-to-rem(20px);

// @function strip-unit($value) {
//   @return math.div($value, 1px); // $value / ($value * 0 + 1);
// }

// // @debug strip-unit(14px);

// @function fluid-scale($min-size, $max-size, $viewport-min, $viewport-max) {
//   $min: strip-unit($min-size);
//   $max: strip-unit($max-size);
//   $vp-min: strip-unit($viewport-min);
//   $vp-max: strip-unit($viewport-max);

//   $slope: $max - $min;
//   $range: $vp-max - $vp-min;

//   @return calc(
//     #{$min-size} + #{$slope} * ((100vw - #{$viewport-min}) / #{$range})
//   );
// }

// @debug fluid-scale(14px, 24px, 320px, 1200px);

// // –ó–∞–≤–¥–∞–Ω–Ω—è 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –µ–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–∫—É
// –°—Ç–≤–æ—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—é is-in-list($value, $list), —è–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –º—ñ—Å—Ç–∏—Ç—å—Å—è –µ–ª–µ–º–µ–Ω—Ç —É —Å–ø–∏—Å–∫—É.

// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ñ—É–Ω–∫—Ü—ñ—é index($list, $value) –¥–ª—è –ø–æ—à—É–∫—É —ñ–Ω–¥–µ–∫—Å—É –µ–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–∫—É.

$list: (apple, banana, orange, grape, pear);

@function is-in-list($value, $list) {
  @if (list.index($list, $value) != null) {
    @return true;
  } @else {
    @return false;
  }
}
// @debug is-in-list("banana", $list); // –ú–∞—î –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ true
// @debug is-in-list("mango", $list); // –ú–∞—î –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ false

// –ó–∞–≤–¥–∞–Ω–Ω—è 2: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑ –ø–µ–≤–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é generate-range($start, $end), —è–∫–∞ –≥–µ–Ω–µ—Ä—É—î —Å–ø–∏—Å–æ–∫ —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª –≤—ñ–¥ $start –¥–æ $end (–≤–∫–ª—é—á–Ω–æ).

// –¢–µ—Ö–Ω—ñ—á–Ω—ñ –º–æ–º–µ–Ω—Ç–∏:

// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ü–∏–∫–ª @for –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É.

// –ü–æ–≤–µ—Ä–Ω–∏ —Å–ø–∏—Å–æ–∫, —è–∫–∏–π –±—É–¥–µ –º–∞—Ç–∏ –≤–∏–≥–ª—è–¥ (1, 2, 3, 4, ..., n).

@function generate-range($start, $end) {
  $range: ();
  @for $i from $start through $end {
    $range: append($range, $i);
  }

  @return $range;
}

// @debug generate-range(1, 5);

// –ó–∞–≤–¥–∞–Ω–Ω—è 3: –û–±'—î–¥–Ω–∞–Ω–Ω—è –¥–≤–æ—Ö —Å–ø–∏—Å–∫—ñ–≤
// –°—Ç–≤–æ—Ä–∏ –º—ñ–∫—Å–∏–Ω combine-lists($list1, $list2), —è–∫–∏–π –æ–±'—î–¥–Ω—É—î –¥–≤–∞ —Å–ø–∏—Å–∫–∏ –≤ –æ–¥–∏–Ω.
// –ü–æ–≤–µ—Ä–Ω–∏ –Ω–æ–≤–∏–π –æ–±'—î–¥–Ω–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫.

$list1: ("apple", "banana", "cherry");
$list2: ("date", "elderberry", "fig");

@mixin combine-lists($list1, $list2) {
  $combined-list: $list1;
  @each $el in $list2 {
    $combined-list: append($combined-list, $el);
  }
  @debug $combined-list;
}

// @debug combine-lists($list1, $list2);

// –ó–∞–≤–¥–∞–Ω–Ω—è 4: –û–±—á–∏—Å–ª–µ–Ω–Ω—è —Å—É–º–∏ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —Å–ø–∏—Å–∫—É
// –°—Ç–≤–æ—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—é sum-list($list), —è–∫–∞ –æ–±—á–∏—Å–ª—é—î —Å—É–º—É –≤—Å—ñ—Ö —á–∏—Å–µ–ª —É —Å–ø–∏—Å–∫—É.

// –¢–µ—Ö–Ω—ñ—á–Ω—ñ –º–æ–º–µ–Ω—Ç–∏:

// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π @each –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä—É —Å–ø–∏—Å–∫—É.

// –î–æ–¥–∞–π –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –¥–æ –∑–º—ñ–Ω–Ω–æ—ó —ñ –ø–æ–≤–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

// $list: (1, 2, 3);

@function sum-list($list) {
  $sum: 0;
  @each $el in $list {
    $sum: $sum + $el;
  }

  @return $sum;
}

// @debug sum-list($list);

// –ó–∞–≤–¥–∞–Ω–Ω—è 5: –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –Ω–∞ —Ä—è–¥–æ–∫
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é list-to-string($list), —è–∫–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î —Å–ø–∏—Å–æ–∫ –Ω–∞ —Ä—è–¥–æ–∫ –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏, —Ä–æ–∑–¥—ñ–ª–µ–Ω–∏–º–∏ –∫–æ–º–∞–º–∏.

// –¢–µ—Ö–Ω—ñ—á–Ω—ñ –º–æ–º–µ–Ω—Ç–∏:

// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ñ—É–Ω–∫—Ü—ñ—é @each –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä—É –µ–ª–µ–º–µ–Ω—Ç—ñ–≤.

// –§–æ—Ä–º–∞—Ç—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —è–∫ —Ä—è–¥–æ–∫.

// $list: (1, 2, 3);

@function list-to-string($list) {
  $sum: "";

  @each $el in $list {
    $sum: $sum + "#{$el}, ";
  }

  @return $sum;
}

// @debug list-to-string($list);

// –ó–∞–≤–¥–∞–Ω–Ω—è 6: –í–∏–±—ñ—Ä –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑–∞ –ø–∞—Ä–Ω–∏–º–∏ —ñ–Ω–¥–µ–∫—Å–∞–º–∏
// –°—Ç–≤–æ—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—é get-even-index-elements($list), —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑ –ø–∞—Ä–Ω–∏–º–∏ —ñ–Ω–¥–µ–∫—Å–∞–º–∏.

// –¢–µ—Ö–Ω—ñ—á–Ω—ñ –º–æ–º–µ–Ω—Ç–∏:

// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π @for –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –Ω–∞ –ø–∞—Ä–Ω—ñ—Å—Ç—å —ñ–Ω–¥–µ–∫—Å—É.

// –ü–æ–≤–µ—Ä–Ω–∏ –Ω–æ–≤–∏–π —Å–ø–∏—Å–æ–∫ –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ –Ω–∞ –ø–∞—Ä–Ω–∏—Ö —ñ–Ω–¥–µ–∫—Å–∞—Ö.

$list: ("apple", "banana");

@function get-even-index-elements($list) {
  $result: ();

  @for $i from 1 through list.length($list) {
    @if ($i%2==0) {
      $result: append($result, nth($list, $i));
    }
  }
  @return $result;
}

// @debug get-even-index-elements($list);

// –ó–∞–≤–¥–∞–Ω–Ω—è 7: –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫ —Å–ø–∏—Å–∫—É
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é reverse-list($list), —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —É –∑–≤–æ—Ä–æ—Ç–Ω—å–æ–º—É –ø–æ—Ä—è–¥–∫—É.

// –¢–µ—Ö–Ω—ñ—á–Ω—ñ –º–æ–º–µ–Ω—Ç–∏:

// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ü–∏–∫–ª @for –¥–ª—è –æ–±—Ö–æ–¥—É —Å–ø–∏—Å–∫—É –∑ –∫—ñ–Ω—Ü—è.

// –ü–æ–≤–µ—Ä–Ω–∏ –Ω–æ–≤–∏–π —Å–ø–∏—Å–æ–∫ —É –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É.

$list: ("apple", "banana");

@function reverse-list($list) {
  $result: ();

  @for $i from list.length($list) through 1 {
    $result: append($result, list.nth($list, $i));
  }
  @return $result;
}

// @debug reverse-list($list);
//

// –∞–≤–¥–∞–Ω–Ω—è 1: –ü–æ—à—É–∫ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∫–ª—é—á–µ–º
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é get-color($colors, $key), —è–∫–∞:

// –ü—Ä–∏–π–º–∞—î —Å–ª–æ–≤–Ω–∏–∫ –∫–æ–ª—å–æ—Ä—ñ–≤ —ñ –∫–ª—é—á

// –ü–æ–≤–µ—Ä—Ç–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–º –∫–ª—é—á–µ–º

$colors: (
  primary: #007bff,
  danger: #dc3545,
  success: #28a745,
);

@function get-color($colors, $key) {
  @return map.get($colors, $key);
}

// –û—á—ñ–∫—É—î—Ç—å—Å—è: #dc3545
// @debug get-color($colors, danger);

// üîπ –ó–∞–≤–¥–∞–Ω–Ω—è 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–ª—é—á–∞
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é has-key($map, $key), —è–∫–∞:
// –ü–æ–≤–µ—Ä—Ç–∞—î true, —è–∫—â–æ –∫–ª—é—á —î –≤ —Å–ª–æ–≤–Ω–∏–∫—É
// –Ü–Ω–∞–∫—à–µ ‚Äî false

// @function has-key($colors, $key) {
//   $isAvailable: map.get($colors, $key);
//   @if ($isAvailable) {
//     @return true;
//   } @else {
//     @return false;
//   }
// }

// @debug has-key($colors, primary); // true
// @debug has-key($colors, warning); // false
// @debug map.has-key($colors, danger); //  –≤–±—É–¥–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è

// üîπ –ó–∞–≤–¥–∞–Ω–Ω—è 3: –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è –≤ —Å–ª–æ–≤–Ω–∏–∫—É
// –°—Ç–≤–æ—Ä–∏ –º—ñ–∫—Å–∏–Ω update-color($map, $key, $value), —è–∫–∏–π:
// –ó–∞–º—ñ–Ω—é—î –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∫–ª—é—á–µ–º –∞–±–æ –¥–æ–¥–∞—î –Ω–æ–≤—É –ø–∞—Ä—É
// –ü–æ–≤–µ—Ä—Ç–∞—î –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫

@function update-color($map, $key, $value) {
  @return map.set($map, $key, $value);
}

// –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –æ–Ω–æ–≤–∏—Ç–∏ –∞–±–æ –¥–æ–¥–∞—Ç–∏ "warning: #ffc107"
// @debug update-color($colors, warning, #ffc107);


// üîπ –ó–∞–≤–¥–∞–Ω–Ω—è 4: –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞—Å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ–ª—å–æ—Ä—É
// –°—Ç–≤–æ—Ä–∏ –º—ñ–∫—Å–∏–Ω generate-color-classes($map), —è–∫–∏–π:
// –î–ª—è –∫–æ–∂–Ω–æ—ó –ø–∞—Ä–∏ key‚Äìvalue —É —Å–ª–æ–≤–Ω–∏–∫—É
// –ì–µ–Ω–µ—Ä—É—î –∫–ª–∞—Å .text-{key} –∑ –∫–æ–ª—å–æ—Ä–æ–º color: value

$colors: (
  primary: #007bff,
  danger: #dc3545,
  success: #28a745,
  warning: #ffc107,
);

@mixin generate-color-classes($map) {
  @each $key, $value in $map {
    .text-#{$key} {
      color: $value;
    }
  }
}

@include generate-color-classes($colors);

// üîπ –ó–∞–≤–¥–∞–Ω–Ω—è 5: –û–±‚Äô—î–¥–Ω–∞–Ω–Ω—è –¥–≤–æ—Ö —Å–ª–æ–≤–Ω–∏–∫—ñ–≤
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é merge-maps($map1, $map2), —è–∫–∞:
// –û–±‚Äô—î–¥–Ω—É—î –¥–≤–∞ —Å–ª–æ–≤–Ω–∏–∫–∏
// –£ –≤–∏–ø–∞–¥–∫—É –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É –∫–ª—é—á—ñ–≤ ‚Äî –∑–Ω–∞—á–µ–Ω–Ω—è –∑ $map2 –º–∞—é—Ç—å –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç

$map1: (
  a: 1,
  b: 2,
);
$map2: (
  b: 20,
  c: 30,
);

@function merge-maps($map1, $map2) {
  @return map.merge($map1, $map2);
}
@debug merge-maps($map1, $map2); // => (a: 1, b: 20, c: 30)
